<mxfile>
    <diagram id="Lm4nKWto8GY6URv-1aVc" name="Page-1">
        <mxGraphModel dx="3002" dy="1737" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="0" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="60" value="motion_imitation/run.py [func defs] + main" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;html=1;" parent="1" vertex="1">
                    <mxGeometry x="-820" y="-960" width="370" height="290" as="geometry"/>
                </mxCell>
                <mxCell id="69" value="&lt;font face=&quot;helvetica&quot; style=&quot;line-height: 130%&quot;&gt;# startup file | functions :&lt;br&gt;- set_rand_seed()&lt;br&gt;- build_model()&lt;br&gt;- train()&lt;br&gt;- test()&lt;br&gt;- main()&lt;br&gt;&lt;/font&gt;" style="text;whiteSpace=wrap;html=1;" parent="60" vertex="1">
                    <mxGeometry y="26" width="370" height="114" as="geometry"/>
                </mxCell>
                <mxCell id="62" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;html=1;" parent="60" vertex="1">
                    <mxGeometry y="140" width="370" height="8" as="geometry"/>
                </mxCell>
                <mxCell id="68" value="&lt;p style=&quot;line-height: 130%&quot;&gt;main() : # parse command args&lt;br&gt;&lt;br&gt;# get num of CPUs&lt;br&gt;&lt;br&gt;# build environement&lt;br&gt;env = env_builder.build_imitation_env()&lt;br&gt;- motion_files, num_cpu&lt;/p&gt;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;html=1;" parent="60" vertex="1">
                    <mxGeometry y="148" width="370" height="142" as="geometry"/>
                </mxCell>
                <mxCell id="70" value="motion_imitation/envs/env_builder.py : [func defs]" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;html=1;" parent="1" vertex="1">
                    <mxGeometry x="-820" y="-260" width="700" height="628" as="geometry">
                        <mxRectangle x="-1440" y="-200" width="320" height="26" as="alternateBounds"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="71" value="&lt;b&gt;## creates the gym env | functions :&lt;/b&gt;&amp;nbsp;&lt;br&gt;build_laikago_env()&lt;br&gt;build_imitation_env()&lt;br&gt;build_regular_env()" style="text;whiteSpace=wrap;html=1;" parent="70" vertex="1">
                    <mxGeometry y="26" width="700" height="74" as="geometry"/>
                </mxCell>
                <mxCell id="72" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;html=1;" parent="70" vertex="1">
                    <mxGeometry y="100" width="700" height="8" as="geometry"/>
                </mxCell>
                <mxCell id="73" value="&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;/p&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;build_imitation_env(motion_files, num_parallel_envs, mode, enable_randomizer, enable_rendering, robot_class=laikago.Laikago,&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;trajectory_generator=simple_openloop.LaikagoPoseOffsetGenerator(action_limit=laikago.UPPER_BOUND)) :&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# sets episode length&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# creates simulation parameters&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;sim_params = SimulationParameters()&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;sim_params = ...&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# sets simulation parameters&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;gym_config = LocomotionGymConfig(sim_params)&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# sets sensors&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;HistoricSensorWrapper()&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;MotorAngleSensor&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;IMUSensor&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;LastActionsSensor&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# sets tast : imitation task&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;task = imitation_task.ImitationTask()&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# sets randomizers&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;randomizer = ControllableEnvRandomizerFromConfig()&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# creates the env&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;env = LocomotionGymEnv(gym_config, robot_class = Laikago, randomizers, sensors, task)&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# flatten observation . transcript it to an array&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;env = ObservationDictionnaryToArrayWrapper(env)&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# add the trajectory&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;env = TrajectoryGeneratorWrapper(env, trajectory_generator)&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;btw : traj_gen = simple_openloop.LaikagoPoseOffsetGenerator()&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# another wrapper :&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;env = imitationWrapperEnv()&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;return env&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;p&gt;&lt;/p&gt;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;fontStyle=2;html=1;" parent="70" vertex="1">
                    <mxGeometry y="108" width="700" height="520" as="geometry"/>
                </mxCell>
                <mxCell id="74" value="motion_imitation/envs/locomotion_gym_env.py [class]" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;html=1;" parent="1" vertex="1">
                    <mxGeometry x="-1780" y="290" width="710" height="1320" as="geometry">
                        <mxRectangle x="-510" y="110" width="340" height="26" as="alternateBounds"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="75" value="&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;i&gt;## class used for the creation of the gym env&lt;/i&gt;&lt;/b&gt;&lt;br&gt;&lt;u&gt;// attr / args :&amp;nbsp;&lt;/u&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;- gym_config : An instance of LocomotionGymConfig&lt;/span&gt;&lt;br style=&quot;padding: 0px ; margin: 0px&quot;&gt;&lt;span&gt;- robot_class :A class of robot. We provide a class rather than an instance due to hard_reset&amp;nbsp;&lt;/span&gt;&lt;br style=&quot;padding: 0px ; margin: 0px&quot;&gt;&lt;span&gt;functionality.&lt;/span&gt;&lt;br style=&quot;padding: 0px ; margin: 0px&quot;&gt;&lt;span&gt;- sensors : A list of environmental sensors for observation&lt;/span&gt;&lt;br style=&quot;padding: 0px ; margin: 0px&quot;&gt;&lt;span&gt;- task : A callable function/class to calculate the reward and termination condition. Takes the gym&amp;nbsp;&lt;/span&gt;&lt;br style=&quot;padding: 0px ; margin: 0px&quot;&gt;&lt;span&gt;env as argument when calling.&lt;/span&gt;&lt;br style=&quot;padding: 0px ; margin: 0px&quot;&gt;&lt;span&gt;- env_randomizers :&amp;nbsp; A list of EnvRandomizers(s). An EnvRandomizer may randomize the physical&lt;/span&gt;&lt;br style=&quot;padding: 0px ; margin: 0px&quot;&gt;&lt;span&gt;property of minitaur, change the terrain during reset(), or add perturbation forces durring step().&lt;/span&gt;&lt;br style=&quot;padding: 0px ; margin: 0px&quot;&gt;&lt;br style=&quot;padding: 0px ; margin: 0px&quot;&gt;&lt;span&gt;Raises : ValueError :&amp;nbsp; If the num_action_repeat is less than 1&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;u&gt;// attrs :&lt;/u&gt;&lt;br&gt;- world_dict : A dictionnary containing the objects in the world other than the robot&lt;br&gt;- other many miscellaneous attrs...&lt;br&gt;&lt;br&gt;&lt;u&gt;// functions :&lt;/u&gt;&lt;br&gt;__init__(self, gym_config, robot_class, env_sensors, robot_sensors, task, env_randomizers)&lt;br&gt;_build_action_space(self) : builds action space based on motor control mode&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 140%&quot;&gt;&lt;span&gt;close(self)&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 140%&quot;&gt;&lt;span&gt;seed(self, seed=None)&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 140%&quot;&gt;&lt;span&gt;all_sensors(self) : Returns all the robot and env sensors&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 140%&quot;&gt;&lt;span&gt;sensor_by_name(self, name) : Returns the sensor with the given name, or None if not exist&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 140%&quot;&gt;**reset(self, initial_motor_angles=None, reset_duration=0.0, reset_visualization_camera=True) : Resets the robot's position in the world or rebuild the sim world.&amp;nbsp;The simulation world will be rebuilt if self._hard_reset is True.**&amp;nbsp;&lt;i&gt;&amp;nbsp;&lt;/i&gt;&lt;b&gt;C'est ici que je modifie le terrain&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 140%&quot;&gt;**step(self, action) : Step forward the simulation, given the action.**&lt;/p&gt;&lt;p style=&quot;line-height: 140%&quot;&gt;render(self, mode='rgb_array')&lt;/p&gt;&lt;p style=&quot;line-height: 140%&quot;&gt;get_ground(self)&lt;/p&gt;&lt;p style=&quot;line-height: 140%&quot;&gt;set_ground(self)&lt;/p&gt;&lt;p style=&quot;line-height: 140%&quot;&gt;// other misc functions&lt;/p&gt;&lt;p style=&quot;line-height: 140%&quot;&gt;_get_observation(self): Get observation of this environment from a list of sensors.&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Returns : observations : sensory observation in the numpy array format&lt;/p&gt;&lt;p style=&quot;line-height: 140%&quot;&gt;**set_time_step(self, num_action_repeat, sim_step=0.001)** : Sets the time step of the environment&lt;/p&gt;&lt;p style=&quot;line-height: 140%&quot;&gt;&lt;br&gt;&lt;/p&gt;" style="text;whiteSpace=wrap;html=1;" parent="74" vertex="1">
                    <mxGeometry y="26" width="710" height="724" as="geometry"/>
                </mxCell>
                <mxCell id="76" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;html=1;" parent="74" vertex="1">
                    <mxGeometry y="750" width="710" height="8" as="geometry"/>
                </mxCell>
                <mxCell id="77" value="&lt;p style=&quot;line-height: 130%&quot;&gt;**reset()** : Args&lt;/p&gt;&lt;p style=&quot;line-height: 130%&quot;&gt;initial motor_angles : A list of Floats. The desired joint angles after reset. If None, the robot will use its built-in value&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; reset_duration : Float. The time (in seconds) needed to rotate all motors to the desired initial values.&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; reset_visalization_camera : Whether to reset debug visualization camera on reset.&lt;/p&gt;&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;span&gt;Returns : A numpy array contains the initial observation after reset.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 130%&quot;&gt;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;&lt;p style=&quot;line-height: 130%&quot;&gt;**step()** : Args&lt;/p&gt;&lt;p style=&quot;line-height: 130%&quot;&gt;action : Can be a list of desired motor angles for all motors when the robot is in position control mode; A list of desired motor torques. Or a list of tuples, (q, qdot, kp, kd, tau) for hybrid control mode. The action must be compatible with robot's motor control mode. Also, we are not going to use the leg space (swing/extension) definition at the gym level, since they are specific to Minitaur.&lt;/p&gt;&lt;p style=&quot;line-height: 130%&quot;&gt;Returns :&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 130%&quot;&gt;observations : The observation dictionnary. The keys are the sensor names and the values are the sensor readings.&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; reward : The reward for the current state-action pair.&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; done : Whether the episode has ended.&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; info : A dictionnary that stores diagnostic information&lt;/p&gt;&lt;p style=&quot;line-height: 130%&quot;&gt;Raises :&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ValueError : The action dimension is not the same as the number of motors.&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ValueError : The magnitude fo actions is out of bounds.&lt;/p&gt;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;&lt;br&gt;**set_time_step** :&lt;br&gt;Args :&lt;br&gt;num_action_repeat: The number of simulation steps/action repeats to be executed when calling env.step()&lt;br&gt;sim_step : The simulation time step in Pybullet. By default, the simulation step is 0.001s, which is a good trade-off between simulation speed and accuracy.&lt;br&gt;&lt;br&gt;Raises:&amp;nbsp;&lt;br&gt;ValueError : If the num_action_repeat is less than 1." style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;html=1;whiteSpace=wrap;" parent="74" vertex="1">
                    <mxGeometry y="758" width="710" height="562" as="geometry"/>
                </mxCell>
                <mxCell id="78" value="" style="html=1;verticalAlign=bottom;labelBackgroundColor=none;endArrow=block;endFill=1;exitX=0.003;exitY=0.684;exitDx=0;exitDy=0;exitPerimeter=0;entryX=0.003;entryY=0.023;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" source="68" target="73" edge="1">
                    <mxGeometry width="160" relative="1" as="geometry">
                        <mxPoint x="-1530" y="-80" as="sourcePoint"/>
                        <mxPoint x="-1390" y="-30" as="targetPoint"/>
                        <Array as="points">
                            <mxPoint x="-950" y="-715"/>
                            <mxPoint x="-960" y="-140"/>
                        </Array>
                    </mxGeometry>
                </mxCell>
                <mxCell id="79" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0;exitDx=0;exitDy=0;entryX=-0.001;entryY=0.701;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" source="75" target="73" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="80" value="motion_imitation/envs/env_wrappers/imitation_wrapper_env.py : [class]" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;html=1;" parent="1" vertex="1">
                    <mxGeometry x="-820" y="540" width="700" height="868" as="geometry">
                        <mxRectangle x="-1440" y="-200" width="320" height="26" as="alternateBounds"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="81" value="&lt;span&gt;## An env using for training policy with motion imitation&lt;br&gt;&lt;span style=&quot;font-weight: 400&quot;&gt;&lt;u&gt;//Args :&lt;/u&gt;&lt;br&gt;gym_env (attr)&lt;br&gt;episode_length_start (attr)&lt;br&gt;episode_length_end (attr)&lt;br&gt;curriculum_steps&lt;br&gt;num_parallel_envs&lt;br&gt;&lt;br&gt;&lt;u&gt;//Attrs:&lt;/u&gt;&lt;br&gt;_curriculum_steps = int(ceil(curriculum_steps/num_parallel_envs)&lt;br&gt;_total_step_count = 0&lt;br&gt;&lt;br&gt;&lt;u&gt;// Functions:&lt;/u&gt;&lt;br&gt;__init__()&lt;br&gt;__getattr__()&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400&quot;&gt;step() : steps the wrapped env&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;reset() : resets the robot's position in the world or rebuild the sim world&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;_modify_observation() : appends target observations from the reference motion to the observations&lt;br&gt;_build_observation_space() : constructs the obs space, including target obervations from the reference motion&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400&quot;&gt;_enable_curriculum() :&amp;nbsp; check if curriculum is enabled&lt;br&gt;_update_time_limit() : updates the current episode length depending on the number of environnement steps taken so far&lt;/span&gt;&lt;br&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;fontStyle=1" parent="80" vertex="1">
                    <mxGeometry y="26" width="700" height="314" as="geometry"/>
                </mxCell>
                <mxCell id="82" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;html=1;" parent="80" vertex="1">
                    <mxGeometry y="340" width="700" height="8" as="geometry"/>
                </mxCell>
                <mxCell id="83" value="&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;/p&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;build_imitation_env(motion_files, num_parallel_envs, mode, enable_randomizer, enable_rendering, robot_class=laikago.Laikago,&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;trajectory_generator=simple_openloop.LaikagoPoseOffsetGenerator(action_limit=laikago.UPPER_BOUND)) :&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# sets episode length&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# creates simulation parameters&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;sim_params = SimulationParameters()&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;sim_params = ...&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# sets simulation parameters&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;gym_config = LocomotionGymConfig(sim_params)&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# sets sensors&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;HistoricSensorWrapper()&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;MotorAngleSensor&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;IMUSensor&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;LastActionsSensor&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# sets tast : imitation task&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;imitation_task.ImitationTask()&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# sets randomizers&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;ControllableEnvRandomizerFromConfig()&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# creates the env&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;env = LocomotionGymEnv(gym_config, robot_class = Laikago, randomizers, sensors, task)&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# flatten observation . transcript it to an array&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;env = ObservationDictionnaryToArrayWrapper(env)&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# add the trajectory&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;env = TrajectoryGeneratorWrapper(env, trajectory_generator)&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;btw : traj_gen = simple_openloop.LaikagoPoseOffsetGenerator()&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;# another wrapper :&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;env = imitationWrapperEnv()&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;div style=&quot;text-align: justify&quot;&gt;&lt;span&gt;return env&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;p&gt;&lt;/p&gt;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;fontStyle=2;html=1;" parent="80" vertex="1">
                    <mxGeometry y="348" width="700" height="520" as="geometry"/>
                </mxCell>
                <mxCell id="84" value="" style="endArrow=classic;html=1;entryX=0;entryY=0.015;entryDx=0;entryDy=0;entryPerimeter=0;exitX=-0.006;exitY=0.941;exitDx=0;exitDy=0;exitPerimeter=0;" parent="1" source="73" target="80" edge="1">
                    <mxGeometry width="50" height="50" relative="1" as="geometry">
                        <mxPoint x="-830" y="370" as="sourcePoint"/>
                        <mxPoint x="-630" y="650" as="targetPoint"/>
                        <Array as="points">
                            <mxPoint x="-850" y="337"/>
                            <mxPoint x="-850" y="553"/>
                        </Array>
                    </mxGeometry>
                </mxCell>
                <mxCell id="90" value="motion_imitation/envs/env_wrappers/imitation_task.py [class]" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;html=1;" parent="1" vertex="1">
                    <mxGeometry x="70" y="540" width="730" height="830" as="geometry">
                        <mxRectangle x="-510" y="110" width="340" height="26" as="alternateBounds"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="91" value="&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;b&gt;&lt;i&gt;## Imitation reference motion task&lt;/i&gt;&lt;/b&gt;&lt;br&gt;&lt;u&gt;// attr / args:&lt;/u&gt;&lt;br&gt;&lt;/font&gt;&lt;/p&gt;&lt;div style=&quot;line-height: 18px&quot;&gt;&lt;div&gt;&lt;u&gt;weight&lt;/u&gt;: Float. The scaling factor for the reward.&lt;/div&gt;&lt;div&gt;&lt;u&gt;      terminal_condition&lt;/u&gt;: Callable object or function. Determines if the task is&amp;nbsp;&lt;span&gt;done.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;      ref_motion_filenames&lt;/u&gt;: List of files containing reference motion data.&lt;/div&gt;&lt;div&gt;&lt;u&gt;      enable_cycle_sync&lt;/u&gt;: Boolean indicating if the root of the reference motion&amp;nbsp;&lt;span&gt;should be synchronized with the root of the simulated robot&amp;nbsp; &amp;nbsp;at the start&amp;nbsp;&lt;/span&gt;&lt;span&gt;of every cycle to mitigate drift.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;      clip_velocity: if not None, we will clip the velocity with this value.&lt;/div&gt;&lt;div&gt;&lt;u&gt;      tar_frame_steps&lt;/u&gt;: The number of steps to sample each target frame to&amp;nbsp;&lt;span&gt;include in the target observations.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;      clip_time_min&lt;/u&gt;: Minimum amount of time a reference motion clip is active&amp;nbsp;&lt;span&gt;before switching to another clip.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;      clip_time_max&lt;/u&gt;: Maximum amount of time a reference motion clip is active&amp;nbsp;&lt;span&gt;before switching to another clip.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;      ref_state_init_prob&lt;/u&gt;: Probability of initializing the robot to a state from&amp;nbsp;&lt;span&gt;the reference at the start of each episode. When not initializing&amp;nbsp; &amp;nbsp;to a&amp;nbsp;&lt;/span&gt;&lt;span&gt;reference state, the robot will be initialized to the default state.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;      enable_rand_init_time&lt;/u&gt;: Flag for enabling randomly initializing to&amp;nbsp;&lt;span&gt;different points in time alont a reference motion.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;      warmup_time&lt;/u&gt;: Amount of time for the robot to move from default pose to&amp;nbsp;&lt;span&gt;reference pose at the start of each episode. This helps for&amp;nbsp; &amp;nbsp;deployment,&amp;nbsp;&lt;/span&gt;&lt;span&gt;so that the robot doesn't try to move to the reference pose too quickly&amp;nbsp;&lt;/span&gt;&lt;span&gt;from its default pose.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;      pose_weight&lt;/u&gt;: Pose reward weight.&lt;/div&gt;&lt;div&gt;&lt;u&gt;      velocity_weight&lt;/u&gt;: Velocity reward weight.&lt;/div&gt;&lt;div&gt;&lt;u&gt;      end_effector_weight&lt;/u&gt;: End effector reward weight.&lt;/div&gt;&lt;div&gt;&lt;u&gt;      root_pose_weight&lt;/u&gt;: Root position and rotation reward weight.&lt;/div&gt;&lt;div&gt;&lt;u&gt;      root_velocity_weight&lt;/u&gt;: Root linear and angular velocity reward weight.&lt;/div&gt;&lt;div&gt;&lt;u&gt;      pose_err_scale&lt;/u&gt;: Pose error scale for calculating pose reward.&lt;/div&gt;&lt;div&gt;&lt;u&gt;      velocity_err_scale&lt;/u&gt;: Velocity error scale for calculating velocity reward.&lt;/div&gt;&lt;div&gt;&lt;u&gt;      end_effector_err_scale&lt;/u&gt;: End effector error scale for calculating end&amp;nbsp;&lt;span&gt;effector reward.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;      end_effector_height_err_scale&lt;/u&gt;: End effector height error scale for&amp;nbsp;&lt;span&gt;calculating the end effector reward.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;      root_pose_err_scale&lt;/u&gt;: Root position and rotation error scale for&amp;nbsp;&lt;span&gt;calculating root position and rotation reward.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;      root_velocity_err_scale&lt;/u&gt;: Root linear and angular velocity error scale for&amp;nbsp;&lt;span&gt;calculating root linear and angular velocity reward.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;      perturb_init_state_prob&lt;/u&gt;: Probability of applying random pertubations to&amp;nbsp;&lt;span&gt;the initial state.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;      tar_obs_noise&lt;/u&gt;: List of the standard deviations of the noise to be applied&amp;nbsp;&lt;span&gt;to the target observations [base rotation std, base position&amp;nbsp; &amp;nbsp; &amp;nbsp; std].&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;      draw_ref_model_alpha&lt;/u&gt;: Color transparency for drawing the reference model.&lt;/div&gt;&lt;/div&gt;&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;span&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;br&gt;&lt;u&gt;// functions :&lt;/u&gt;&lt;br&gt;__call__(self, env): returns self.reward(env)&lt;br&gt;reset(self, env) : Resets the internal state of the task&lt;br&gt;update(self, env): Updates the internal state of the task&lt;br&gt;done(self, env) : check id the episode is over&lt;br&gt;get_num_motions(self): Get the number of reference motions to be imitated | Returns : Number of reference motions&lt;br&gt;get_num_tar_frames(self): Get the number of target frames to include in the observations&lt;br&gt;get _ref_model(self): Get the reference simulated model used for the reference motion&lt;br&gt;is_motion_over(self): Checks if the current reference motion is over | Returns boolean indicating if the motion is over&lt;br&gt;get_active_motion(self): Get index of the active reference motion currently being imitated | Returns : Index of the active reference motion&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;span&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;b&gt;Big file, lots of important functions : computing reward / termination condition / stuff with reference motion ...&lt;/b&gt;&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;" style="text;whiteSpace=wrap;html=1;" parent="90" vertex="1">
                    <mxGeometry y="26" width="730" height="804" as="geometry"/>
                </mxCell>
                <mxCell id="93" value="" style="endArrow=classic;html=1;exitX=1.002;exitY=0.475;exitDx=0;exitDy=0;exitPerimeter=0;entryX=0.42;entryY=-0.004;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" source="73" target="90" edge="1">
                    <mxGeometry width="50" height="50" relative="1" as="geometry">
                        <mxPoint x="40" y="100" as="sourcePoint"/>
                        <mxPoint x="90" y="50" as="targetPoint"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="95" value="motion_imitation/utilities/motion_data.py [class]" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;html=1;" parent="1" vertex="1">
                    <mxGeometry x="80" y="1520" width="730" height="500" as="geometry">
                        <mxRectangle x="-510" y="110" width="340" height="26" as="alternateBounds"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="96" value="&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;b&gt;&lt;i&gt;## Read and process motion reference .txt file. Organizes it into a class and provides methods to modify it.&lt;br&gt;&lt;/i&gt;&lt;/b&gt;// Args : motion_file&lt;/p&gt;&lt;p style=&quot;line-height: 130%&quot;&gt;// Attrs :&lt;/p&gt;&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;span style=&quot;font-size: 13.5px&quot;&gt;# hardcoded json style reading tokens for pasing the .txt conf file&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;span style=&quot;font-size: 13.5px&quot;&gt;POS_SIZE = 3&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 13.5px&quot;&gt;ROT_SIZE = 4&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 13.5px&quot;&gt;VEL_SIZE = 3&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 13.5px&quot;&gt;ANG_VEL_SIZE = 3&lt;/span&gt;&lt;/p&gt;&lt;div style=&quot;font-size: 13.5px ; line-height: 18px&quot;&gt;&lt;div&gt;_LOOP_MODE_KEY = &quot;LoopMode&quot;&lt;/div&gt;&lt;div&gt;  _FRAME_DURATION_KEY = &quot;FrameDuration&quot;&lt;/div&gt;&lt;div&gt;  _FRAMES_KEY = &quot;Frames&quot;&lt;/div&gt;&lt;div&gt;  _ENABLE_CYCLE_OFFSET_POSITION_KEY = &quot;EnableCycleOffsetPosition&quot;&lt;/div&gt;&lt;div&gt;  _ENABLE_CYCLE_OFFSET_ROTATION_KEY = &quot;EnableCycleOffsetRotation&quot;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;line-height: 18px&quot;&gt;&lt;div&gt;self._loop_mode = LoopMode.Clamp&lt;/div&gt;&lt;div&gt;    self._frame_duration = 0&lt;/div&gt;&lt;div&gt;    self._frames = None&lt;/div&gt;&lt;div&gt;    self._frame_vels = None&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;line-height: 18px&quot;&gt;&lt;div&gt;    self._cycle_delta_pos = self._calc_cycle_delta_pos()&lt;/div&gt;&lt;div&gt;    self._cycle_delta_heading = self._calc_cycle_delta_heading()&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;// functions :&amp;nbsp;&lt;/div&gt;&lt;div&gt;mainly function for getting/setting precise information from .txt conf file : frames, positions, rotations, quaternions, differences (delta), computing velocities etc...&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" parent="95" vertex="1">
                    <mxGeometry y="26" width="730" height="474" as="geometry"/>
                </mxCell>
                <mxCell id="97" value="" style="endArrow=classic;html=1;exitX=-0.002;exitY=0.905;exitDx=0;exitDy=0;exitPerimeter=0;entryX=0.424;entryY=-0.007;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" source="91" target="95" edge="1">
                    <mxGeometry width="50" height="50" relative="1" as="geometry">
                        <mxPoint x="-20" y="1220" as="sourcePoint"/>
                        <mxPoint x="30" y="1170" as="targetPoint"/>
                        <Array as="points">
                            <mxPoint x="10" y="1294"/>
                            <mxPoint x="10" y="1470"/>
                        </Array>
                    </mxGeometry>
                </mxCell>
                <mxCell id="116" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="98" target="102">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="98" value="BaseRLModel : Class" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;html=1;" vertex="1" parent="1">
                    <mxGeometry x="799" y="-490" width="371" height="110" as="geometry"/>
                </mxCell>
                <mxCell id="99" value="&lt;font face=&quot;helvetica&quot; style=&quot;line-height: 130%&quot;&gt;load_parameters() # base function for loading ONLY N.N weights&lt;br&gt;&lt;/font&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="98">
                    <mxGeometry y="26" width="371" height="54" as="geometry"/>
                </mxCell>
                <mxCell id="100" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;html=1;" vertex="1" parent="98">
                    <mxGeometry y="80" width="371" height="8" as="geometry"/>
                </mxCell>
                <mxCell id="101" value="&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;br&gt;&lt;/p&gt;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;html=1;" vertex="1" parent="98">
                    <mxGeometry y="88" width="371" height="22" as="geometry"/>
                </mxCell>
                <mxCell id="117" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="102" target="106">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="102" value="ActorCriticRLModel : Class" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;html=1;" vertex="1" parent="1">
                    <mxGeometry x="800" y="-330" width="370" height="110" as="geometry"/>
                </mxCell>
                <mxCell id="103" value="&lt;font face=&quot;helvetica&quot; style=&quot;line-height: 130%&quot;&gt;load() # load N.N weights and optimizer's hyperparameters&lt;br&gt;&lt;/font&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="102">
                    <mxGeometry y="26" width="370" height="54" as="geometry"/>
                </mxCell>
                <mxCell id="104" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;html=1;" vertex="1" parent="102">
                    <mxGeometry y="80" width="370" height="8" as="geometry"/>
                </mxCell>
                <mxCell id="105" value="&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;br&gt;&lt;/p&gt;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;html=1;" vertex="1" parent="102">
                    <mxGeometry y="88" width="370" height="22" as="geometry"/>
                </mxCell>
                <mxCell id="118" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="106" target="110">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="106" value="pposgd_simple.PPO1 : Class" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;html=1;" vertex="1" parent="1">
                    <mxGeometry x="800" y="-170" width="370" height="110" as="geometry"/>
                </mxCell>
                <mxCell id="107" value="&lt;font face=&quot;helvetica&quot; style=&quot;line-height: 130%&quot;&gt;save() # save N.N weights and optimizer's hyperparameters in a .zip file&lt;br&gt;&lt;/font&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="106">
                    <mxGeometry y="26" width="370" height="54" as="geometry"/>
                </mxCell>
                <mxCell id="108" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;html=1;" vertex="1" parent="106">
                    <mxGeometry y="80" width="370" height="8" as="geometry"/>
                </mxCell>
                <mxCell id="109" value="&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;br&gt;&lt;/p&gt;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;html=1;" vertex="1" parent="106">
                    <mxGeometry y="88" width="370" height="22" as="geometry"/>
                </mxCell>
                <mxCell id="110" value="PPOImitation : Class" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;html=1;" vertex="1" parent="1">
                    <mxGeometry x="800" y="-10" width="370" height="110" as="geometry"/>
                </mxCell>
                <mxCell id="111" value="&lt;font face=&quot;helvetica&quot; style=&quot;line-height: 130%&quot;&gt;setup_model() # self explanatory, sets up the model when creating a&amp;nbsp; brand new model or creating a model from a .zip model save&lt;br&gt;&lt;/font&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="110">
                    <mxGeometry y="26" width="370" height="54" as="geometry"/>
                </mxCell>
                <mxCell id="112" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;html=1;" vertex="1" parent="110">
                    <mxGeometry y="80" width="370" height="8" as="geometry"/>
                </mxCell>
                <mxCell id="113" value="&lt;p style=&quot;line-height: 130%&quot;&gt;&lt;br&gt;&lt;/p&gt;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;html=1;" vertex="1" parent="110">
                    <mxGeometry y="88" width="370" height="22" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>